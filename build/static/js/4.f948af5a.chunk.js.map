{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.jsx"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntered","setIsEntered","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iHCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCyD/BC,EApDG,SAAAL,GACd,MAAkCM,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACI,eAAC,WAAD,WACI,cAAC,IAAD,CAAQE,KAAML,EAAWM,QAAS,SAAAC,GAAQ,MAAI,yEAC9C,cAAC,EAAD,UACI,uBAAMC,QAZS,WACvBP,GAAa,IAW8BP,UAAWC,IAAQc,KAAMC,SAvBxE,SAA2BC,GACvBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAexC,UACKvB,EAAM2B,WACH,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACI,cAACC,EAAA,EAAD,MAIR,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACI,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAExC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACI,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEtC,qBAAKV,UAAWC,IAAQkC,QAAxB,SACI,wBAAQC,QAxBE,WAC5B7B,GAAa,IAuB6CP,UAAU,MAAlD,kCCxBTqC,UApBE,WACb,MAA+BC,YAAQC,KAAhCC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OACdC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACCC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAKZ,OACI,cAAC,WAAD,UACI,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAuBlB,WAL7B,SAAAuB,GACpBN,EAAYM","file":"static/js/4.f948af5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport { Fragment } from 'react/cjs/react.production.min';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = props => {\n    const [isEntered, setIsEntered] = useState(false);\n    const authorInputRef = useRef();\n    const textInputRef = useRef();\n\n    function submitFormHandler(event) {\n        event.preventDefault();\n\n        const enteredAuthor = authorInputRef.current.value;\n        const enteredText = textInputRef.current.value;\n\n        // optional: Could validate here\n\n        props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    }\n\n    const FormFocusedHandler = () => {\n        setIsEntered(true);\n    };\n\n    const finishEnteringHandler = () => {\n      setIsEntered(false)\n    }\n\n    return (\n        <Fragment>\n            <Prompt when={isEntered} message={location => 'Are you sure you want to leave? All your entered data will be lost!'} />\n            <Card>\n                <form onFocus={FormFocusedHandler} className={classes.form} onSubmit={submitFormHandler}>\n                    {props.isLoading && (\n                        <div className={classes.loading}>\n                            <LoadingSpinner />\n                        </div>\n                    )}\n\n                    <div className={classes.control}>\n                        <label htmlFor=\"author\">Author</label>\n                        <input type=\"text\" id=\"author\" ref={authorInputRef} />\n                    </div>\n                    <div className={classes.control}>\n                        <label htmlFor=\"text\">Text</label>\n                        <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n                    </div>\n                    <div className={classes.actions}>\n                        <button onClick={finishEnteringHandler} className=\"btn\">Add Quote</button>\n                    </div>\n                </form>\n            </Card>\n        </Fragment>\n    );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\nimport { Fragment } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useHttp from '../hooks/use-http'\nimport { addQuote } from '../lib/api'\n\nimport QuoteForm from '../components/quotes/QuoteForm';\n\nconst NewQuote = () => {\n    const {sendRequest, status } = useHttp(addQuote)\n    const history = useHistory();\n\n    useEffect(() => {\n        if(status === 'completed'){\n            history.push('/quotes')\n        }\n    }, [status, history])\n\n    const addQuoteHandler = quoteData => {\n        sendRequest(quoteData)\n    };\n    return (\n        <Fragment>\n            <QuoteForm isLoading={status === 'pending'}  onAddQuote={addQuoteHandler} />\n        </Fragment>\n    );\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}