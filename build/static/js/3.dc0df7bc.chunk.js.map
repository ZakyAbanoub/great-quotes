{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.jsx"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","length","AddedCommentHandler","useCallback","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to"],"mappings":"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","file":"static/js/3.dc0df7bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} =  useHttp(addComment)\n  const { onAddedComment } = props\n\n  useEffect( ()=> {\n    if(status === 'completed' && !error){\n      onAddedComment()\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId})\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className=\"centered\">\n        <LoadingSpinner />\n        </div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList'\nimport useHttp from '../../hooks/use-http';\nimport {getAllComments } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams()\n  const {sendRequest, status, data: loadedComments} =  useHttp(getAllComments)\n\n  const { quoteId } = params\n\n  useEffect( () => {\n    sendRequest(quoteId)\n  }, [quoteId, sendRequest])\n\n  let comments;\n\n  if(status === 'pending'){\n    comments = <div className=\"centered\">\n      <LoadingSpinner />\n    </div>\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length)){\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className=\"centered\">\n        No Comments were added yet!\n    </p>\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const AddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId])\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={AddedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport HighlitedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api'\n\n\nconst QuoteDetail = () => {\n    const match = useRouteMatch()\n    const params = useParams();\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true)\n    const { quoteId } = params\n\n    useEffect(() =>{\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    if(status === 'pending'){\n        return <div className=\"centered\">\n            <LoadingSpinner />\n        </div>\n    }\n\n    if(error){\n        return <p className=\"centered\">{error}</p>\n    }\n    \n    if (!loadedQuote.text) {\n        return <p>No Quote Found!</p>;\n    }\n\n\n    return (\n        <>\n            <HighlitedQuote text={loadedQuote.text} author={loadedQuote.author} />\n            <Route path={`/quotes/${params.quoteId}`} exact>\n                <div className=\"centered\">\n                    <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>\n                        Load comments\n                    </Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </>\n    );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}