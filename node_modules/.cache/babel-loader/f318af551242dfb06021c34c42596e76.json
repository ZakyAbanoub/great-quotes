{"ast":null,"code":"var _jsxFileName = \"/home/user/Scaricati/react-router/09-time-to-practice-starting-code/09-time-to-practice-starting-code/src/pages/AllQuotes.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllQuotes = () => {\n  _s();\n\n  const [quotes, setQuotes] = useState([]);\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focused\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: quotes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AllQuotes, \"6WiOyWS5Dlem/rdH3DmWMLb+5tw=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["/home/user/Scaricati/react-router/09-time-to-practice-starting-code/09-time-to-practice-starting-code/src/pages/AllQuotes.jsx"],"names":["useState","useEffect","QuoteList","LoadingSpinner","useHttp","getAllQuotes","AllQuotes","quotes","setQuotes","sendRequest","status","data","loadedQuotes","error","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAES,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,IAAI,EAAEC,YAA7B;AAA2CC,IAAAA;AAA3C,MAAoDT,OAAO,CAACC,YAAD,EAAe,IAAf,CAAjE;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,WAAW;AACd,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,MAAGC,MAAM,KAAK,SAAd,EAAwB;AACpB,wBAAO;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACH,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAGH;;AAED,MAAGG,KAAH,EAAS;AACL,wBAAO;AAAG,MAAA,SAAS,EAAC,kBAAb;AAAA,gBAAiCA;AAAjC;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAGH,MAAM,KAAK,WAAX,KAA2B,CAACE,YAAD,IAAiBA,YAAY,CAACE,MAAb,KAAwB,CAApE,CAAH,EAA0E;AACtE,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAEP;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAvBD;;GAAMD,S;UAEwDF,O;;;KAFxDE,S;AAyBN,eAAeA,SAAf","sourcesContent":["import {useState, useEffect} from 'react'\nimport QuoteList from '../components/quotes/QuoteList'\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\nimport useHttp from '../hooks/use-http'\nimport { getAllQuotes } from '../lib/api'\n\n\nconst AllQuotes = () => {\n    const [quotes, setQuotes] = useState([])\n    const { sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true)\n\n    useEffect(() => {\n        sendRequest()\n    }, [sendRequest])\n\n    if(status === 'pending'){\n        return <div className=\"centered\">\n            <LoadingSpinner />\n        </div>\n    }\n\n    if(error){\n        return <p className=\"centered focused\">{error}</p>\n    }\n\n    if(status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)){\n        return <NoQuotesFound />\n    }\n\n    return <QuoteList quotes={quotes} />\n}\n\nexport default AllQuotes"]},"metadata":{},"sourceType":"module"}