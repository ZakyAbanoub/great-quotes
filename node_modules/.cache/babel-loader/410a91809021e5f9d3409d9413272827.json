{"ast":null,"code":"import{useEffect}from'react';import{useParams,Route,Link,useRouteMatch}from'react-router-dom';import Comments from'../components/comments/Comments';import HighlitedQuote from'../components/quotes/HighlightedQuote';import LoadingSpinner from'../components/UI/LoadingSpinner';import useHttp from'../hooks/use-http';import{getSingleQuote}from'../lib/api';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var QuoteDetail=function QuoteDetail(){var match=useRouteMatch();var params=useParams();var _useHttp=useHttp(getSingleQuote,true),sendRequest=_useHttp.sendRequest,status=_useHttp.status,loadedQuote=_useHttp.data,error=_useHttp.error;var quoteId=params.quoteId;useEffect(function(){sendRequest(quoteId);},[sendRequest,quoteId]);if(status==='pending'){return/*#__PURE__*/_jsx(\"div\",{className:\"centered\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}if(error){return/*#__PURE__*/_jsx(\"p\",{className:\"centered\",children:error});}if(!loadedQuote.text){return/*#__PURE__*/_jsx(\"p\",{children:\"No Quote Found!\"});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(HighlitedQuote,{text:loadedQuote.text,author:loadedQuote.author}),/*#__PURE__*/_jsx(Route,{path:\"/quotes/\".concat(params.quoteId),exact:true,children:/*#__PURE__*/_jsx(\"div\",{className:\"centered\",children:/*#__PURE__*/_jsx(Link,{className:\"btn--flat\",to:\"/quotes/\".concat(params.quoteId,\"/comments\"),children:\"Load comments\"})})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(match.path,\"/comments\"),children:/*#__PURE__*/_jsx(Comments,{})})]});};export default QuoteDetail;","map":{"version":3,"sources":["/home/user/Scaricati/react-router/09-time-to-practice-starting-code/09-time-to-practice-starting-code/src/pages/QuoteDetail.jsx"],"names":["useEffect","useParams","Route","Link","useRouteMatch","Comments","HighlitedQuote","LoadingSpinner","useHttp","getSingleQuote","QuoteDetail","match","params","sendRequest","status","loadedQuote","data","error","quoteId","text","author","path"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,SAAT,CAAoBC,KAApB,CAA2BC,IAA3B,CAAiCC,aAAjC,KAAsD,kBAAtD,CACA,MAAOC,CAAAA,QAAP,KAAqB,iCAArB,CACA,MAAOC,CAAAA,cAAP,KAA2B,uCAA3B,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAASC,cAAT,KAA+B,YAA/B,C,6IAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtB,GAAMC,CAAAA,KAAK,CAAGP,aAAa,EAA3B,CACA,GAAMQ,CAAAA,MAAM,CAAGX,SAAS,EAAxB,CACA,aAAwDO,OAAO,CAACC,cAAD,CAAiB,IAAjB,CAA/D,CAAOI,WAAP,UAAOA,WAAP,CAAoBC,MAApB,UAAoBA,MAApB,CAAkCC,WAAlC,UAA4BC,IAA5B,CAA+CC,KAA/C,UAA+CA,KAA/C,CACA,GAAQC,CAAAA,OAAR,CAAoBN,MAApB,CAAQM,OAAR,CAEAlB,SAAS,CAAC,UAAK,CACXa,WAAW,CAACK,OAAD,CAAX,CACH,CAFQ,CAEN,CAACL,WAAD,CAAcK,OAAd,CAFM,CAAT,CAIA,GAAGJ,MAAM,GAAK,SAAd,CAAwB,CACpB,mBAAO,YAAK,SAAS,CAAC,UAAf,uBACH,KAAC,cAAD,IADG,EAAP,CAGH,CAED,GAAGG,KAAH,CAAS,CACL,mBAAO,UAAG,SAAS,CAAC,UAAb,UAAyBA,KAAzB,EAAP,CACH,CAED,GAAI,CAACF,WAAW,CAACI,IAAjB,CAAuB,CACnB,mBAAO,sCAAP,CACH,CAGD,mBACI,wCACI,KAAC,cAAD,EAAgB,IAAI,CAAEJ,WAAW,CAACI,IAAlC,CAAwC,MAAM,CAAEJ,WAAW,CAACK,MAA5D,EADJ,cAEI,KAAC,KAAD,EAAO,IAAI,mBAAaR,MAAM,CAACM,OAApB,CAAX,CAA0C,KAAK,KAA/C,uBACI,YAAK,SAAS,CAAC,UAAf,uBACI,KAAC,IAAD,EAAM,SAAS,CAAC,WAAhB,CAA4B,EAAE,mBAAaN,MAAM,CAACM,OAApB,aAA9B,2BADJ,EADJ,EAFJ,cASI,KAAC,KAAD,EAAO,IAAI,WAAKP,KAAK,CAACU,IAAX,aAAX,uBACI,KAAC,QAAD,IADJ,EATJ,GADJ,CAeH,CAxCD,CA0CA,cAAeX,CAAAA,WAAf","sourcesContent":["import { useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport HighlitedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api'\n\n\nconst QuoteDetail = () => {\n    const match = useRouteMatch()\n    const params = useParams();\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true)\n    const { quoteId } = params\n\n    useEffect(() =>{\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    if(status === 'pending'){\n        return <div className=\"centered\">\n            <LoadingSpinner />\n        </div>\n    }\n\n    if(error){\n        return <p className=\"centered\">{error}</p>\n    }\n    \n    if (!loadedQuote.text) {\n        return <p>No Quote Found!</p>;\n    }\n\n\n    return (\n        <>\n            <HighlitedQuote text={loadedQuote.text} author={loadedQuote.author} />\n            <Route path={`/quotes/${params.quoteId}`} exact>\n                <div className=\"centered\">\n                    <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>\n                        Load comments\n                    </Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </>\n    );\n};\n\nexport default QuoteDetail;\n"]},"metadata":{},"sourceType":"module"}